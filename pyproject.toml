[project]
authors = []
maintainers = []
name = "vaait"
version = "0.1.0"
description = "Default template for PDM package"
readme = "README.md"
license = { text = "BUSINESS" }
requires-python = ">=3.11"
dependencies = [
    "litestar[cli,jinja,jwt,pydantic,sqlalchemy,standard]",
    "pydantic-settings>=2.0.3",
    "asyncpg>=0.28.0",
    "python-dotenv>=1.0.0",
    "passlib[argon2]>=1.7.4",
    "litestar-saq>=0.1.16",
    "litestar-vite>=0.1.4",
    "litestar-aiosql>=0.1.1",
    "boto3>=1.34.25",
    "python-ffmpeg>=2.0.10",
    "pyav>=12.0.2",
    "boto3-stubs[essential]>=1.34.27",
    "s3fs>=0.4.2",
    "awscli>=1.32.28",
    "pydub>=0.25.1",
    "whisperx @ git+https://github.com/Sann-Htet/whisperX.git",
    "numpy>=1.26.3",
    "ollama-haystack",
    "lm-format-enforcer",
    "jiwer>=3.0.3",
    "ollama>=0.1.6",
    "gliner>=0.1.2",
    "farm-haystack[faiss-gpu,inference]>=1.25.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
app = "litestar.__main__:run_cli"

[tool.pdm]
distribution = true
[tool.pdm.scripts]
lint = "pre-commit run --all-files"
test = "pytest"
ci = { composite = ["lint", "test"] }
dev = "litestar --app='backend.src.vaait.app:app' run --reload -d --port 8000  --host 0.0.0.0"
prod = "litestar --app='backend.src.vaait.app:app' run"
activate = "pdm venv activate in-project"
[tool.pdm.dev-dependencies]
lint = [
    "ruff>=0.1.6",
    "codespell>=2.2.6",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
    "shellcheck-py>=0.9.0.6",
    "pyright>=1.1.337",
    "boto3-stubs[essential]>=1.34.27",
]
test = ["pytest>=7.4.3", "pytest-asyncio>=0.21.1", "pytest-cov>=4.1.0"]

[tool.hatch.build]
dev-mode-dirs = ["backend/src"]
packages = ["backend/src/vaait"]

[tool.hatch.metadata]
allow-direct-references = true


[tool.codespell]
ignore-words-list = "selectin"
skip = 'pdm.lock'

[tool.coverage.run]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'raise NotImplementedError',
]

[tool.pytest.ini_options]
# addopts = "--ignore=examples"
asyncio_mode = "auto"

[tool.pyright]
include = ["backend/src"]

[tool.slotscheck]
strict-imports = false

[tool.mypy]
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_return_any = true
strict = true
disallow_untyped_decorators = true
disallow_any_generics = false
implicit_reexport = false
show_error_codes = true

[tool.ruff]
select = ["ALL"]
ignore = [
    "E501",    # pycodestyle line too long, handled by black
    "D100",    # pydocstyle - missing docstring in public module
    "D101",    # pydocstyle - missing docstring in public class
    "D102",    # pydocstyle - missing docstring in public method
    "D103",    # pydocstyle - missing docstring in public function
    "D104",    # pydocstyle - missing docstring in public package
    "D105",    # pydocstyle - missing docstring in magic method
    "D106",    # pydocstyle - missing docstring in public nested class
    "D107",    # pydocstyle - missing docstring in __init__
    "D202",    # pydocstyle - no blank lines allowed after function docstring
    "D205",    # pydocstyle - 1 blank line required between summary line and description
    "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
    "UP037",   # pyupgrade - removes quotes from type annotation
    "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
    "B008",    #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
    "RUF012",  # ruff - mutable class attributes should be annotated with `typing.ClassVar`
    "ANN401",  # ruff - Dynamically typed expressions (typing.Any) are disallowed
    "ANN102",
    "ANN101",  # ruff - Missing type annotation for `self` in method
    "PLR0913", # ruff - Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "FBT001",  # Boolean typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "FBT003",  # Boolean Boolean default positional argument in function definition
    "ARG002",  # Unused method argument
    "ARG001",  #  Unused function argument
    "TD002",
    "TD003",
    "FIX002",
    "PGH003",
    "RUF006",
    "SLF001",
    "PT007",
    'PT004',
    'PT005',
    'S603',
    "E501",    # pycodestyle line too long, handled by black
    "PLW2901", # pylint - for loop variable overwritten by assignment target
    "ANN401",
    "ANN102",
    "ANN101",
    "FBT",
    "PLR0913", # too many arguments
    "PT",
    "TD",
    "PERF203", # ignore for now; investigate
]
line-length = 120
src = ["backend/src/", "backend/tests"]
target-version = "py311"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    '__pycache__',
]
fix = true


[tool.ruff.format]
quote-style = "double"
indent-style = "space"


[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod"]

[tool.ruff.isort]
known-first-party = ["litestar", "tests"]

[tool.ruff.per-file-ignores]
"__init__.py" = ['F401', 'D104']
"tests/**/*.*" = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "PTH",
    "RSE",
    "S",
    "S101",
    "SIM",
    "TCH",
    "TRY",
]
